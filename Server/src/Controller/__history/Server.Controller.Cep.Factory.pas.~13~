unit Server.Controller.Cep.Factory;

interface

uses
  System.Classes,
  System.SysUtils,
  System.JSON, IdHTTP,
  Horse,
  Server.Model.Cep.Interfaces,
  Server.Classes.Constantes;

type
  TControllerCepFactory = class(TInterfacedObject,  IModelFactoryCep)
    FAPICep: IModelCep;
  private
    function SelecionarAPI(const ATipoAPI: TTipoApiCep): IModelCep;
    constructor Create(const ATipoAPI: TTipoApiCep);
  public
    class function New(const ATipoAPI: TTipoApiCep): IModelFactoryCep;
    function ConsultaCep(const ACep: string): TJSONObject;
    function IsOnLine: boolean;
  end;
implementation

uses
  Server.Controller.Cep.ViaCep, Commons.Funcoes;

{ TControllerCepFactory }

class function TControllerCepFactory.New(const ATipoAPI: TTipoApiCep): IModelFactoryCep;
begin
  result := Self.Create(ATipoAPI)
end;

function TControllerCepFactory.ConsultaCep(const ACep: string): TJSONObject;
begin
  result := FAPICep.ConsultaCep(ACep);
end;

constructor TControllerCepFactory.Create(const ATipoAPI: TTipoApiCep);
begin
  FAPICep :=  SelecionarAPI(ATipoAPI);
end;

function TControllerCepFactory.IsOnLine: boolean;
begin
  result := FAPICep.IsOnLine;
end;

function TControllerCepFactory.SelecionarAPI(
  const ATipoAPI: TTipoApiCep): IModelCep;
begin
  case ATipoAPI  of
    taVIaCep:       result := TControllerCepViaCep.New;
    taApiCep:       result := TControllerCepViaCep.New;
    taAwesomeApi:   result := TControllerCepViaCep.New;
  end;
end;

end.
